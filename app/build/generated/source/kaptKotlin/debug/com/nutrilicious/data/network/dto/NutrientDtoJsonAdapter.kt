// Code generated by moshi-kotlin-codegen. Do not edit.
package com.nutrilicious.data.network.dto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Float
import kotlin.Int
import kotlin.String

class NutrientDtoJsonAdapter(moshi: Moshi) : JsonAdapter<NutrientDto>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("detailsId", "group", "name", "nutrient_id", "unit", "value")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter(String::class.java).nullSafe()

    private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java).nonNull()

    private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.java).nullSafe()

    private val floatAdapter: JsonAdapter<Float> = moshi.adapter(Float::class.java).nonNull()

    override fun toString(): String = "GeneratedJsonAdapter(NutrientDto)"

    override fun fromJson(reader: JsonReader): NutrientDto {
        var detailsId: String? = null
        var detailsIdSet: Boolean = false
        var group: String? = null
        var name: String? = null
        var nutrient_id: Int? = null
        var nutrient_idSet: Boolean = false
        var unit: String? = null
        var value_: Float? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    detailsId = nullableStringAdapter.fromJson(reader)
                    detailsIdSet = true
                }
                1 -> group = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'group' was null at ${reader.path}")
                2 -> name = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'name' was null at ${reader.path}")
                3 ->  {
                    nutrient_id = nullableIntAdapter.fromJson(reader)
                    nutrient_idSet = true
                }
                4 -> unit = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'unit' was null at ${reader.path}")
                5 -> value_ = floatAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'value_' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = NutrientDto()
        result.detailsId = if (detailsIdSet) detailsId else result.detailsId
        result.group = group ?: result.group
        result.name = name ?: result.name
        result.nutrient_id = if (nutrient_idSet) nutrient_id else result.nutrient_id
        result.unit = unit ?: result.unit
        result.value = value_ ?: result.value
        return result
    }

    override fun toJson(writer: JsonWriter, value: NutrientDto?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("detailsId")
        nullableStringAdapter.toJson(writer, value.detailsId)
        writer.name("group")
        stringAdapter.toJson(writer, value.group)
        writer.name("name")
        stringAdapter.toJson(writer, value.name)
        writer.name("nutrient_id")
        nullableIntAdapter.toJson(writer, value.nutrient_id)
        writer.name("unit")
        stringAdapter.toJson(writer, value.unit)
        writer.name("value")
        floatAdapter.toJson(writer, value.value)
        writer.endObject()
    }
}
